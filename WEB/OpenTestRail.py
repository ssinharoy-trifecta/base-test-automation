import dotenv, os
import sys
sys.path.insert(0,'../TestrailPython3/')
from testrail import APIClient

def get_testrail_client():
	testrail_file = os.path.join(os.path.dirname(__file__),'testrail.env')
	testrail_url = get_value(testrail_file,'TESTRAIL_URL')
	print(testrail_url)
	client = APIClient(testrail_url)
	client.user = get_value(testrail_file,'TESTRAIL_USER')
	print(client.user)
	client.password = get_value(testrail_file,'TESTRAIL_PASSWORD')
	print(client.password)
	return client
def get_value(conf, key):
	value = None
	try:
		dotenv.load_dotenv(conf)
		value = os.environ[key]
		print("client returned")
	except Exception:
		print ('Exception in get_value for')
		print ('file: ', conf)
		print ('key: ', key)
	return value
def update_testrail(case_id, run_id, result_flag, msg=""):
	update_flag = False
	client = get_testrail_client()
	status_id = 1 if result_flag is True else 5
	if run_id is not None:
		try:
			result = client.send_post(
				'add_result_for_case/%s/%s'%(run_id,case_id),
				{'status_id': status_id, 'comment': msg})
			update_flag = True
		except Exception:
			print ('Exception in update_testrail() updating TestRail.')
			print ('PYTHON SAYS: ')
			print(format(Exception))
	else:
		print ('Updated test result for case: %s in test run: %s with msg:%s'
			%(case_id,run_id,msg))
	return update_flag


if update_testrail(710,203,True,msg='This is testing for a pass'):
	print ("Looks like things worked")
else:
	print("Seems like that failed")